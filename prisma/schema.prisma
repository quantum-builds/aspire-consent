generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String               @id @default(cuid())
  email                String               @unique
  role                 UserRole
  profilePicUrl        String?
  createdAt            DateTime             @default(now())
  password             String
  fullName             String?
  otp                  String?
  sentConsentLinks     ConsentFormLink[]    @relation("DentistConsentLinks")
  receivedConsentLinks ConsentFormLink[]    @relation("PatientConsentLinks")
  practices            DentistToPractice[]
  procedures           DentistToProcedure[]
  MCQs                 MCQ[]

  @@index([email])
}

model Practice {
  id           String              @id @default(cuid())
  name         String
  address      String
  createdAt    DateTime            @default(now())
  consentLinks ConsentFormLink[]
  dentists     DentistToPractice[]
  procedures   Procedure[]
}

model DentistToPractice {
  dentistId  String
  practiceId String
  dentist    User     @relation(fields: [dentistId], references: [id], onDelete: Cascade)
  practice   Practice @relation(fields: [practiceId], references: [id], onDelete: Cascade)

  @@id([practiceId, dentistId])
}

model Procedure {
  id           String               @id @default(cuid())
  name         String
  description  String?
  createdAt    DateTime             @default(now())
  practiceId   String
  consentLinks ConsentFormLink[]
  dentists     DentistToProcedure[]
  MCQs         MCQ[]
  Practice     Practice             @relation(fields: [practiceId], references: [id], onDelete: Cascade)
}

model DentistToProcedure {
  dentistId   String
  procedureId String
  dentist     User      @relation(fields: [dentistId], references: [id], onDelete: Cascade)
  procedure   Procedure @relation(fields: [procedureId], references: [id], onDelete: Cascade)

  @@id([dentistId, procedureId])
}

model MCQ {
  id            String       @id @default(cuid())
  questionText  String
  correctAnswer String
  procedureId   String
  options       String[]
  videoUrl      String
  dentistId     String
  answers       FormAnswer[] @relation("OriginalMCQAnswers")
  dentist       User         @relation(fields: [dentistId], references: [id], onDelete: Cascade)
  procedure     Procedure    @relation(fields: [procedureId], references: [id], onDelete: Cascade)

  @@unique([procedureId, dentistId, id])
}

model ConsentFormMCQSnapshot {
  id                String          @id @default(cuid())
  questionText      String
  correctAnswer     String
  options           String[]
  videoUrl          String
  consentFormLinkId String
  consentFormLink   ConsentFormLink @relation(fields: [consentFormLinkId], references: [id], onDelete: Cascade)
  answers           FormAnswer[]
}

model ConsentFormLink {
  id                 String                   @id @default(cuid())
  token              String                   @unique
  dentistId          String
  procedureId        String
  expiresAt          DateTime
  isActive           Boolean                  @default(true)
  createdAt          DateTime                 @default(now())
  progressPercentage Int                      @default(0)
  status             ConsentStatus            @default(PENDING)
  patientId          String
  lastUpdated        DateTime                 @default(now())
  completedAt        DateTime?
  isDraft            Boolean                  @default(true)
  practiceId         String
  dentist            User                     @relation("DentistConsentLinks", fields: [dentistId], references: [id], onDelete: Cascade)
  patient            User                     @relation("PatientConsentLinks", fields: [patientId], references: [id], onDelete: Cascade)
  practice           Practice                 @relation(fields: [practiceId], references: [id], onDelete: Cascade)
  procedure          Procedure                @relation(fields: [procedureId], references: [id], onDelete: Cascade)
  snapshotMCQs       ConsentFormMCQSnapshot[]
  answers            FormAnswer[]
}

model FormAnswer {
  id                String                  @id @default(cuid())
  consentFormLinkId String
  selectedAnswer    String
  isCorrect         Boolean
  answeredAt        DateTime                @default(now())
  questionText      String
  questionOptions   String[]
  isDraft           Boolean                 @default(true)
  mcqSnapshotId     String?
  originalMCQId     String?
  consentFormLink   ConsentFormLink         @relation(fields: [consentFormLinkId], references: [id], onDelete: Cascade)
  mcqSnapshot       ConsentFormMCQSnapshot? @relation(fields: [mcqSnapshotId], references: [id], onDelete: Cascade)
  originalMCQ       MCQ?                    @relation("OriginalMCQAnswers", fields: [originalMCQId], references: [id], onDelete: Cascade)
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  NO_SHOW
  RESCHEDULED
}

enum UserRole {
  dentist
  patient
}

enum ConsentStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  EXPIRED
}

enum ConsentPackStatus {
  pending
  completed
  failed
}

enum NotificationType {
  reminder
  completion
}
