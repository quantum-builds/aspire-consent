generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String         @id @default(cuid())
  email               String         @unique
  role                UserRole
  profilePicUrl       String?
  createdAt           DateTime       @default(now())
  password            String
  fullName            String?
  otp                 String?
  sentConsentLinks    ConsentFormLink[] @relation("DentistConsentLinks")
  receivedConsentLinks ConsentFormLink[] @relation("PatientConsentLinks")
  practices           DentistToPractice[]
  procedures DentistToProcedure[]
  MCQs        MCQ[]

  PatientAppointment Appointment[] @relation("PatientAppointments")
  DentistAppointment Appointment[] @relation("DentistAppointments")
}
model Practice {
  id           String        @id @default(cuid())
  name         String
  address      String
  users        DentistToPractice[]

  Appointment Appointment[]
}

model DentistToPractice{
  dentistId String
  dentist User @relation(fields: [dentistId],references: [id],onDelete: Cascade)
  practiceId String
  practice Practice @relation(fields: [practiceId],references: [id],onDelete: Cascade)

  @@id([practiceId,dentistId])
}

model Procedure {
  id          String     @id @default(cuid())
  name        String    
  description String?
  MCQs        MCQ[]
  createdAt DateTime @default(now())

  consentLinks ConsentFormLink[]
  dentists DentistToProcedure[]

  Appointment Appointment[]
}

model DentistToProcedure {
  dentistId   String
  dentist     User      @relation(fields: [dentistId], references: [id],onDelete: Cascade)
  procedureId String
  procedure   Procedure @relation(fields: [procedureId], references: [id],onDelete: Cascade)

  @@id([dentistId, procedureId])
}

model MCQ {
  id              String     @id @default(cuid())
  questionText    String
  correctAnswer   String
  options         String[]
  videoUrl        String
  procedureId     String
  procedure       Procedure  @relation(fields: [procedureId], references: [id],onDelete: Cascade)
  dentistId       String   
  dentist         User       @relation(fields: [dentistId], references: [id],onDelete: Cascade)
  answers         FormAnswer[] @relation("OriginalMCQAnswers")
  
  @@unique([procedureId, dentistId, id])
}

model ConsentFormMCQSnapshot {
  id              String     @id @default(cuid())
  questionText    String
  correctAnswer   String
  options         String[]
  videoUrl        String
  consentFormLink ConsentFormLink @relation(fields: [consentFormLinkId], references: [id],onDelete: Cascade)
  consentFormLinkId String
  answers         FormAnswer[]
  
  // No relation back to original MCQ
}

model ConsentFormLink {
  id           String     @id @default(cuid())
  token        String     @unique
  dentistId    String
  dentist      User       @relation("DentistConsentLinks", fields: [dentistId], references: [id], onDelete: Cascade)
  patientId String 
  patient      User      @relation("PatientConsentLinks", fields: [patientId], references: [id],onDelete: Cascade)
  procedureId  String
  procedure    Procedure  @relation(fields: [procedureId], references: [id] ,onDelete: Cascade)
  snapshotMCQs ConsentFormMCQSnapshot[]
  expiresAt    DateTime
  // snapshotMCQs MCQ[] @relation("ConsentLinkMCQs")  
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  progressPercentage Int            @default(0)
  status             ConsentStatus  @default(PENDING)
  answers      FormAnswer[]  
  lastUpdated  DateTime     @default(now()) 
  isDraft          Boolean        @default(true) 
  completedAt      DateTime? 

  Appointment Appointment[]
}

model FormAnswer {
  id              String         @id @default(cuid())
  consentFormLink ConsentFormLink @relation(fields: [consentFormLinkId], references: [id], onDelete: Cascade)
  consentFormLinkId String
  mcqSnapshot     ConsentFormMCQSnapshot? @relation(fields: [mcqSnapshotId], references: [id], onDelete: Cascade)
  mcqSnapshotId   String?
  originalMCQ     MCQ?           @relation("OriginalMCQAnswers", fields: [originalMCQId], references: [id], onDelete: Cascade)
  originalMCQId   String?
  selectedAnswer  String         
  isCorrect       Boolean        
  answeredAt      DateTime      @default(now()) 
  questionText    String        
  questionOptions String[] 
  isDraft         Boolean        @default(true)      
}

model Appointment {
  id             String       @id @default(cuid())
  patientId      String
  patient        User         @relation("PatientAppointments", fields: [patientId], references: [id], onDelete: Cascade)

  dentistId      String
  dentist        User         @relation("DentistAppointments", fields: [dentistId], references: [id], onDelete: Cascade)

  procedureId    String
  procedure      Procedure    @relation(fields: [procedureId], references: [id], onDelete: Cascade)

  practiceId     String
  practice       Practice     @relation(fields: [practiceId], references: [id], onDelete: Cascade)

  consentFormId  String?
  consentForm    ConsentFormLink? @relation(fields: [consentFormId], references: [id], onDelete: SetNull)

  scheduledAt    DateTime
  status         AppointmentStatus @default(SCHEDULED)
  notes          String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  NO_SHOW
  RESCHEDULED
}

enum UserRole {
  dentist
  patient
}

enum ConsentStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  EXPIRED
}

enum ConsentPackStatus {
  pending
  completed
  failed
}

enum NotificationType {
  reminder
  completion
}
